<?php



session_start();

include ('mysql.php');

	include('authentification.php');
	
		$page_num=11;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Ввод/вывод</p><br />

<i></i><br />


<p>
Существует несколько способов представления программного вывода: данные могут быть напечатаны в виде, удобном для восприятия, или записаны в файл для дальнейшего использования. В этой главе обсуждаются некоторые возможности представления выво­димых данных.
</p><br />


<i>Форматированный вывод</i><br />
	
	
<p>	
До сих пор мы использовали два способа вывода: вывод значений выражений в интер­активном режиме и с помощью инструкции print (третий способ — метод объектов- файлов write()).
Часто возникает желание иметь больший контроль над форматированием вывода, чем просто выводить значения, разделенные пробелом. Конечно, Вы можете сами обра­батывать строки: с помощью операций среза и объединения можно создать любое рас­положение, какое только Вы сможете представить. Строки имеют методы, позволяющие дополнять их пробелами до необходимой ширины колонки. Другой путь — использо­вать оператор % со строкой в качестве левого аргумента. Оператор % интерпретирует строку справа как строку формата в стиле функции sprintf() в C, которую нужно применить к правому аргументу, и возвращает строку с результатом форматирования.
Безусловно, остается еще один вопрос: как получить строковое представление для значений различного типа? К счастью, Python предоставляет возможность преобразо­вывать значение любого типа в строку: с помощью функции str(). Фактически язык предоставляет две функции для получения строкового представления — repr() (тот же эффект можно получить просто заключив выражение в обратные кавычки: " expr") и str(). Первый способ, например, используется интерпретатором для вывода значений выражений в интерактивном режиме, второй — для вывода аргументов инструкцией print. Функция str() по возможности возвращает представление, наиболее пригод­ное для вывода, а функция repr() — для ввода выражения в интерактивном режиме. Приведем несколько примеров:
</p><br />

<p id="code">
>>> x = 10 * 3.14<br />
</p><br />

<p>
Число 31.4 не может быть точно представлено в двоичном виде, поэтому:
</p><br />

<p id="code">
>>> x<br />
31.399999999999999 <br />
</p><br />

<p>
Однако функция str() выведет число с разумной точностью:<br />
</p>

<p id="code">
>>> y = 200*200<br />
>>> s = "Значение x равно " + str(x) + \<br />
", значение y равно " + str(y) + "..."<br />
>>> print s<br />
Значение x равно 31.4, значение y равно 40000...<br />
</p><br />


<p>
Длинные целые числа записываются в языке Python с суффиксом ‘L’. Начиная с версии 1.6, функция str() его не выводит:
</p><br />


<p id="code">
>>> repr(10 0 0L)<br />
"1000L"<br />
>>> str(1000L)<br />
"1000"<br />
</p><br />

<p>
Строковое представление можно получить и для других типов:
</p><br />

<p id="code">
>>> p = [x, y]<br />
>>> ps = repr(p)<br />
>>> ps<br />
"[31.399999999999999, 40000]"<br />
>>> "x, y, ("spam", "eggs")"<br />
"(31.399999999999999, 40000, ("spam", "eggs"))"<br />
</p><br />

<p>
Функция repr() (или "") добавляет кавычки и записывает спецсимволы с помо­щью управляющих последовательностей:
</p><br />

<p id="code">
>>> hello = "hello, world\n"<br />
>>> print hello hello, world<br />
>>> hellos = "hello"<br />
>>> print hellos "hello, world\012"<br />
</p><br />

<p>
Выведем таблицу квадратов и кубов двумя описанными способами:
</p><br />

<p id="code">
>>> for x in range(1, 11):<br />
print str(x).rjust(2), str(x*x).rjust(3),<br />
# Обратите внимание на завершающую запятую<br />
print str(x*x*x).rjust(4)<br />
 <br />
1	1	1	   <br />
2	4	8	   <br />
3	9	27	   <br />
4	16	64	   <br />
5	25	125	   <br />
6	36	216	   <br />
7	49	343	   <br />
8	64	512	   <br />
9	81	729	   <br />
10	100	1000	 <br />
<br />
>>> for x in range(1,11):<br />
print "%2d %3d %4d" % (x, x*x, x*x*x)<br />
 <br />
1	1	1	   <br />
2	4	8	   <br />
3	9	27	   <br />
4	16	64	   <br />
5	25	125	   <br />
6	36	216	   <br />
7	49	343	   <br />
8	64	512	   <br />
9	81	729	   <br />
10	100	1000	 <br />
</p><br />


<p>
(Обратите внимание на то, что один пробел между колонками был добавлен инструкцией print.)
Этот пример демонстрирует использование метода строк rjust(), который выравнивает строку вправо в поле заданной ширины, дополняя ее слева пробелами. Ана­логично действуют методы ljust() и center(). Они не выводят ничего — просто возвращают новую строку. Если исходная строка слишком длинная, она не обрезается, а возвращается в неизменном виде: обычно лучше внести беспорядок в расположение колонок, чем вывести неверное значение. (Если Вы действительно хотите ее обрезать, воспользуйтесь операцией среза: ‘s.ljust(n)[0:n]’.)
Также может быть полезна функция zfill(), определенная в модуле string, которая дополняет слева нулями строку с числом, корректно обрабатывая знаки плюс и минус:
</p><br />

<p id="code">
>>> import string<br />
>>> string.zfill("12", 5)<br />
"00012"<br />
>>> string.zfill("-3.14", 7)<br />
"-003.14"<br />
>>> string.zfill("3.14159265359", 5)<br />
"3.14159265359"<br />
</p><br />

<p>
Использование оператора % выглядит примерно так:
</p><br />

<p id="code">
>>> import math<br />
>>> print "Значение PI приближенно равно %5.3f." % \<br />
math.pi<br />
Значение PI приближенно равно 3.142.<br />
</p><br />

<p>
Если в строке нужно вывести несколько значений, в качестве правого операнда используется кортеж:
</p><br />

<p id="code">
>>>	table = {"Sjoerd": 4127,<br />
"Jack" : 4098,<br />
"Dcab" : 7678}<br />
>>>	for name, phone in table.items():<br />
print "%-10s ==> %10d" % (name, phone)<br />
Sjoerd	==>	4127<br />
Dcab	==>	7 67 8<br />
Jack	==>	4098<br />
</p><br />

<p>
Большинство форматов работают точно так же, как и в C. Однако, если типы аргументов не соответствуют формату, интерпретатор приводит их к необходимому типу (например, выражение любого типа может быть преобразовано в строку с помощью встроенной функции str()) или, если это невозможно, генерирует исключение. Вы можете использовать * для того, чтобы передать отдельным параметром ширину поля или точность.
Заметим, что если правый аргумент кортеж, он всегда считается списком аргументов:
</p><br />

<p id="code">
>>> def f(x):<br />
print "Функции передано значение "%s"" % x<br />
>>> f(1)<br />
Функции передано значение "1"<br />
>>> f([1, 2])<br />
Функции передано значение "[1, 2]"<br />
>>> # интерпретируется не так, как Вы ожидали <br />
f((1,))<br />
Функции передано значение "1">>> # ошибка<br />
f((1, 2))<br />
Traceback (most recent call last):<br />
File "<stdin>", line 1, in ?<br />
File "<stdin>", line 2, in f TypeError: not all arguments converted<br />
</p><br />

<p>
В данном случае надежнее будет использовать в качестве правого операнда кортеж, состоящий из одного элемента:
</p><br />

<p id="code">
>>> def f(x):<br />
print "Функции передано значение "%s"" % (x,)<br />
>>> # теперь все правильно <br />
f((1,))<br />
Функции передано значение "(1,)"<br />
>>> f((1, 2))<br />
Функции передано значение "(1, 2)"<br />
</p><br />

<p>
В случае длинных строк формата, Вы можете захотеть ссылаться на переменные по имени вместо их положения. Это можно сделать, используя расширенную запись в виде %(name) format, например:
</p><br />

<p id="code">
>>> table = {"Sjoerd": 4127, "Jack": 4098,<br />
"Dcab": 8637678}<br />
>>> print "Jack: %(Jack)d; Sjoerd: %(Sjoerd)d; \<br />
Dcab: %(Dcab)d" % table<br />
Jack: 4098; Sjoerd: 4127; Dcab: 8637678<br />
</p><br />

<p>
Такая запись особенно полезна в комбинации со встроенной функцией vars(), которая возвращает словарь с переменными в текущей области видимости.
</p><br />





					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>