<?php



session_start();

include ('mysql.php');

	include('authentification.php');

	$page_num=4;

echo '


<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';


include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '

					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '

					</div>
				</div>
				
				<div id="menu">
				
';


include('menu.php');

echo '
				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Типизация в Python
</p><br />

<i>Числовые типы</i><br /><br />

<p>
В языке Python есть четыре типа чисел: целые (int), длинные целые (long int), с плавающей точкой (вещественные; float) и комплексные (complex).
Числа создаются с использованием литералов или как возвращаемый результат встроенной функции или оператора. Числовые литералы в чистом виде (включая шест­надцатеричные и восьмеричные) дают простые целые числа.
Python полностью поддерживает смешанную арифметику: если бинарный арифме­тический оператор имеет операнды разного типа, операнд “меньшего” типа приводится к типу другого операнда (int < long int < float < complex). Это же правило используется для сравнения чисел разного типа. Для приведения чисел к нужному типу
Вы можете использовать встроенные функции int(), long(), float() и complex(). При приведении числа с плавающей точкой к целому (простому или длинному) типу, число округляется в сторону нуля (см. также функции floor() и ceil() в модуле math).
</p><br />


<i>Целые и длинные целые числа</i><br /><br />
		
		
<p>		
Целые числа реализованы с использованием типа long в C, поддерживающего числа в диапазоне не менее чем от —2 147483 647 до 2 147483 647. Длинные целые имеют неогра­ниченную точность.
Литералы целых чисел могут быть записаны в десятичном, восьмеричном и шестна­дцатеричном виде. Десятичная запись состоит из идущих подряд десятичных цифр (0­9), причем первая цифра не может быть нулем. Восьмеричная запись образуется из нуля и следующих за ним восьмеричных цифр (0-7). Шестнадцатеричная запись образуется из приставки ‘0x’ или ‘0X’ и следующих за ней шестнадцатеричных цифр (0-9, a-z, A—z). Знак ‘-’ или ‘+’ не является частью литерала, а лишь унарным оператором, при­меняемым к объекту после его создания. Если литерал представляет число, выходящее за пределы диапазона допустимых чисел, генерируется исключение OverflowError.
Целые литералы с суффиксом ‘L" или ‘l" дают длинные целые (лучше использовать ‘L", из-за схожести символа ‘l" с единицей).
Приведем несколько примеров литералов для целых и длинных целых чисел:
</p><br />

<p id="code">
7 2147483647	0177 0x80000000<br />
3L 79228162514264337593543950336L 0377L 0x100000000L<br />
</p><br />


	<i>Вещественные числа</i><br /><br />
		
		
<p>		
Вещественные числа (числа с плавающей точкой) реализованы с использованием типа double в C (не менее 10 значащих цифр, наибольшее представимое число не меньше 1037).
Запись литералов вещественных чисел состоит из десятичных цифр (первая цифра не может быть нулем) и содержит десятичную точку и/или экспоненциальную часть. Экспоненциальная часть начинается с символа ‘e" или ‘E", далее следует необязательный знак (‘+’ или ‘-’) и одна или несколько десятичных цифр.
Приведем несколько примеров литералов для чисел с плавающей точкой:
</p><br />

<p id="code">
3.14 10. .001 1e10 0 3.14e-10<br />
<p><br />

<p>
Поведение в случаях, когда результат вычисления выражения не может быть пред­ставлен в рамках типа float, зависит от поведения лежащей в основе библиотеки язы­ка C. Обычно существуют значения, представляющие (отрицательные и положительные) бесконечно малые и бесконечно большие числа. Строковое представление таких чисел зависит от версии интерпретатора и используемой для реализации библиотеки языка C, например, они могут выводиться как 1. или -1. с добавлением комментария #INF, #IND или #QNAN.
</p><br />


		<i>Комплексные числа</i><br /><br />
		
		
<p>		
Комплексные числа имеют мнимую и вещественную части, реализованные с использова­нием типа double в C. Литералы мнимого числа создаются путем добавления суффикса ‘j’ или ‘J’ к десятичной записи целого или вещественного числа. Например:
</p>

<p id="code">
3.14j 10.j 10j	.001j 1e100j 3.14e-10j<br />
</p><br />
<p>
Комплексные числа с ненулевой вещественной частью создаются сложением веще­ственной и мнимой частей или с помощью встроенной функции complex() (см. главу 12).
Комплексные числа имеют два атрибута данных и один метод:<br />
real - Действительная часть комплексного числа.<br />
imag - Мнимая часть комплексного числа.<br />
conjugate() - Возвращает комплексное число, сопряженное с данным.<br />
Преобразование комплексных чисел к другим числовым типам неоднозначно: для получения действительной части используйте атрибут real, а абсолютной величины — встроенной функцией abs().
</p><br />



</p>
<i>Строки</i><br />
<p>
Кроме чисел, Python также может работать со строками (string), которые могут быть записаны различными путями. 
Строка — последовательность символов с произвольным доступом, Вы можете получить любой символ строки по его индексу.
 Подобно C, первый символ имеет индекс
0.Нет отдельного типа для символа, символ — это просто строка единичной длины.
Строки в языке Python невозможно изменить. Попытка изменить символ в опреде­ленной позиции или подстроку вызовет ошибку.
Строги могут быть заключены в одинарные или двойные кавычки:
</p><br />
<p id="code">
>>> "spam eggs"<br />
"spam eggs"<br />
>>> "doesn\"t"<br />
"doesn"t"<br />
>>> "doesn"t"<br />
"doesn"t"<br />
>>> ""Yes," he said."<br />
""Yes," he said."<br />
>>> "\"Yes,\" he said."<br />
""Yes," he said."<br />
>>> ""Isn\"t," she said."<br />
""Isn\"t," she said."<br />
</p><br />
<p>
Длинные строковые выражения могут быть разбиты различными способами на несколько строк. Символ новой строки может быть “спрятан” с помощью обратной косой черты (‘\’), например:
</p><br />
<p id="code">
hello = "Это длинное строковое выражение, содержащее\n\ несколько строк текста, как Вы бы это сделали в C.\n\<br />
</p><br />
<p>
Тип переменной совпадает с типом присвоенного ей значения. Рассмотрим еще один
пример:
</p><br />
<p id="code">
>>> message = "Hello world!"<br />
>>> n = 12<br />
>>> type(message)<br />
&lt;type "str"><br />
>>> message = n<br />
>>> print message<br />
12<br />
>>> type(message)<br />
&lt;type "int"><br />
</p><br />

<i>Срезы строк</i><br /><br />


<p>
В языках Си и Паскаль индексы позволяют получать доступ к одиночным символам
строки, но в Питоне все гораздо интереснее: можно обращаться не только к одиночным
символам, но и к целым подстрокам – срезам (по-английски, slices). Смотрите:
</p><br />

<p id="code">
>>> s = "Peter, Paul, and Mary"<br />
>>> print s[0:5]<br />
Peter<br />
>>> print s[7:11]<br />
Paul<br />
>>> print s[17:21]<br />
Mary<br />
</p><br />

<p>
В общем виде: string[n:m],где n указывает индекс начала среза, а m – индекс конца
среза. При этом начальный и конечный индексы разделяются двоеточием. Обратите также
внимание, что символ с индексом m в срез не включается.
</p><br />

<p>
Существуют также сокращенные формы оператора построения среза. Если не указать
начальный или конечный индекс среза то будет подразумеваться начало или конец строки
соответственно:
</p><br />

<p id="code">
>>> print s[:5]<br />
Peter<br />
>>> print s[17:]<br />
Mary<br />
</p><br />
		
					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>