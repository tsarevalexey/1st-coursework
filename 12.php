<?php



session_start();

include ('mysql.php');

	include('authentification.php');
	
		$page_num=12;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Чтение и запись файлов и другие операции</p><br />

<i>Чтение и запись файлов</i><br /><br />


<p>
Встроенная функция open() возвращает объект-файл (file) и обычно используется с двумя аргументами: ‘open(filename, mode)’.
</p><br />

<p id="code">
>>> f=open("/tmp/workfile", "wb")<br />
>>> print f<br />
<open file "/tmp/workfile", mode "wb" at 80a0960><br />
</p><br />

<p>
Первый аргумент — строка, содержащая имя файла, второй аргумент — строка, содер­жащая несколько символов, описывающих режим использования файла. Режим может быть "r", если файл открывается только для чтения, "w" — только для записи (су­ществующий файл будет перезаписан), и "a" — для дописывания в конец файла. В режиме "r+" файл открывается сразу для чтения и записи. Аргумент mode не является обязательным: если он опущен, подразумевается "r" .
В Windows (а в некоторых случаях и в Macintosh) файлы по умолчанию открывают­ся в текстовом режиме — для того, чтобы открыть файл в двоичном режиме, необходимо к строке режима добавить "b". Следует помнить, что двоичные данные, такие как кар­тинки в формате JPEG и даже текст в UNICODE, при чтении из файла или записи в файл, открытый в текстовом режиме, будут испорчены! Лучший способ оградить себя от неприятностей — всегда открывать файлы в двоичном режиме, даже на тех плат­формах, где двоичный режим используется по умолчанию (возможно у Вас когда-нибудь возникнет желание запустить программу на другой платформе).
</p><br />


<i>Методы объектов-файлов</i><br /><br />
		
		
<p>		
Примеры в этом разделе рассчитаны на то, что объект-файл f уже создан.
</p><br />

<p>
f .read(size) считывает и возвращает некоторое количество данных из файла. Аргумент size не является обязательным. Если он опущен или отрицательный, будет считано все содержимое файла, в противном случае, будет считано не более size байт данных. По достижении конца файла, возвращается пустая строка ().
</p><br />

<p id="code">
>>> f.read() # Считываем все содержимое файла "This is the entire file.\012"<br />
>>> f.read()<br />
""<br />
</p><br />

<p>
f .readline() считывает из файла одну строку. Возвращаемая строка всегда заканчивается символом новой строки (\n), за исключением последней строки файла, если файл не заканчивается символом новой строки. Это делает возвращаемое значение недвусмысленным: если readline() возвращает пустую строку — значит, достигнут конец файла, в то время как пустая строка будет представлена как "\n".
</p><br />


<p id="code">
>>> f.readline() # Считываем первую строку "This is the first line of the file.\012"<br />
>>> f.readline() # Считываем вторую строку "Second line of the file\012"<br />
>>> f.readline() # Достигли конца файла<br />
I I<br />
</p><br />

<p>
f .readlines() считывает все содержимое файла, и возвращает список строк.
</p><br />

<p id="code">
>>> f.readlines()<br />
["This is the first line of the file.\012",<br />
"Second line of the file\012"]<br />
</p><br />

<p>
f .write(s) записывает содержимое строки s в файл.
</p><br />

<p id="code">
>>> f.write("This is a test\n")<br />
</p><br />

<p>
f .tell() возвращает текущее положение в файле в байтах, отсчитываемое от начала файла. Чтобы изменить текущее положение, используйте ‘f .seek(offset, from_what) ’. Новое положение вычисляется путем добавления offset к точке от­счета. Точка отсчета выбирается в зависимости от значения аргумента from_what:
0		соответствует началу файла (используется по умолчанию, если метод вызывается с одним аргументом), 1 — текущему положению и 2 — концу файла.
</p><br />

<p id="code">
>>> f=open("/tmp/workfile", "rb+")<br />
>>> f.write("0123456789abcdef")<br />
>>> f.seek(5)	# Go to the 5th byte in the file<br />
>>> f.read(1)<br />
"5"<br />
>>> f.seek(-3, 2) # Go to the 3rd byte before the end >>> f.read(1)<br />
"d"<br />
</p><br />

<p>
После того, как Вы закончили все операции с файлом, закройте файл с помощью f .close(). При попытке использовать закрытый файл для операций чтения/записи генерируется исключение ValueError:
</p><br />

<p id="code">
>>> f.close()<br />
>>> f.read()<br />
Traceback (innermost last):<br />
File "<stdin>", line 1, in ?<br />
ValueError: I/O operation on closed file<br />
</p><br />

					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>