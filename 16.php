<?php



session_start();

include ('mysql.php');

	include('authentification.php');
	
		$page_num=16;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Случайные числа</p><br />

<i></i><br />

<p>
Большинство программ делают одно и то же при каждом выполнении, поэтому говорят,
что такие программы определенные. Определенность хорошая вещь до тех пор, пока мы
считаем, что одни и те же вычисления должны давать один и тот же результат. Тем не менее,
в некоторых программах от компьютера требуется непредсказуемость. Типичным примером
являются игры, но есть масса других применений: в частности, моделирование физических
процессов или статистические эксперименты.
</p><br />

<p>
Заставить программу быть действительно непредсказуемой задача не такая простая, но
есть способы заставить ее казаться непредсказуемой. Одним из таких способов является
генерирование случайных чисел и использование их в программе.
</p><br />

<p>
В Питоне есть встроенный модуль, который позволяет генерировать псевдослучаные
числа. Они не истинно случайны, с математической точки зрения, но для наших целей
вполне подойдут.
</p><br />

<p>
Модуль random включает в себя функцию random, которая возвращает действительное
число в диапазоне от 0.0 до 1.0. Каждый раз при вызове функции random вы получите
число из длинного ряда. Чтобы посмотреть, как она работает, запустим следующую
программу:
</p><br />

<p id="code">
>>> import random<br />
>>> for i in range(10):<br />
>>> x = random.random()<br />
>>> print x<br />
</p><br />

<p>
Чтобы получить случайное число между 0.0 и верхней границей high, просто
умножьте x на high.
</p><br />


	<i>Список случайных величин</i><br /><br />


<p>
Первым шагом является создание списка случайных величин. randomList принимает
целое число в качестве параметра и возвращает список случайных чисел заданной длины.
Она начинает выполнятся со списком из n нулей. При каждом проходе через цикл она
заменяет один из элементов случайным числом. Возвращаемое значение является ссылкой на
полный список:
</p><br />

<p id="code">
def randomList(n):<br />
&nbsp;&nbsp;&nbsp;&nbsp;
s = [0] * n<br />
&nbsp;&nbsp;&nbsp;&nbsp;
for i in range(n):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
s[i] = random.random()<br />
&nbsp;&nbsp;&nbsp;&nbsp;
return s<br />
</p><br />


<p>
Проверим эту функцию на списке из восьми элементов. Из соображений отладки
удобно начать с малого.
</p><br />

<p id="code">
>>> randomList(8)<br />
0.15156642489<br />
0.498048560109<br />
0.810894847068<br />
0.360371157682<br />
0.275119183077<br />
0.328578797631<br />
0.759199803101<br />
0.800367163582<br />
</p><br />

<p>
Числа, выдаваемые функцией random, распределены равномерно; это значит, что все
значения равновероятны.
Если разбить диапазон возможных значений на одинаковые по размеру «ячейки» и
посчитать, сколько раз случайное число попадет в каждую из ячеек, то мы увидим, что в
каждой ячейке это количество почти одно и то же.
Эту теорию можно проверить, написав программу, которая будет разделять диапазон на
ячейки и считать количество значений в каждой из них.
</p><br />

	
					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>