<?php



session_start();

include ('mysql.php');

	include('authentification.php');
	
		$page_num=10;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Модули</p><br />

<i></i><br />


<p>
Когда Вы выходите из интерпретатора и заходите снова, все сделанные Вами определения (функции, переменные) безвозвратно теряются. Поэтому, если Вы хотите набрать сколько-нибудь длинную программу, для приготовления ввода лучше воспользоваться текстовым редактором. По мере возрастания программы, Вы, возможно, захотите раз­бить ее на несколько файлов, чтобы их было легче поддерживать. Вы можете захотеть использовать написанные Вами полезные функции в нескольких программах, не копируя их определения в каждую из программ.
Python позволяет поместить определения в файл и использовать их в программах и интерактивном режиме. Такой файл называется модулем. Определения из модуля могут быть импортированы в другие модули и в главный модуль (коллекция переменных, доступная в программе и в интерактивном режиме).
</p><br />


<i>Создание и использование модулей</i><br />


<p>
Модуль — файл, содержащий определения и другие инструкции языка Python. Имя файла образуется путем добавления к имени модуля суффикса (расширения) ‘.py’. В пределах модуля, его имя доступно в глобальной переменной	name	. Например, ис­пользуя Ваш любимый текстовый редактор, создайте в текущем каталоге файл с именем ‘fibo.py’ следующего содержания:
</p><br />

<p id="code">
"""\<br />
Генерация и вывод чисел Фибоначчи """<br />
def fib(n):<br />
"""Выводит последовательность чисел Фибоначчи, не превышающих n""" <br />
a, b = 0, 1 <br />
while b < n:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
print b, a, b = b, a+b<br />
def fib2(n):<br />
"""Возвращает список, содержащий числа ряда Фибоначчи, не превышающие n"""<br />
result = [] <br />
a, b = 0, 1 <br />
while b < n:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
result.append(b)<br />
a, b = b, a+b <br />
return result<br />
</p>

<p>
Теперь запустите интерпретатор и импортируйте только что созданный модуль:
</p><br />

<p id="code">
>>> import fibo<br />
</p>

<p>
Эта инструкция не вводит имена функций, определенных в fibo прямо в текущее про­странство имен, она только вводит имя модуля fibo. Используя имя модуля, Вы можете получить доступ к функциям:
</p><br />

<p id="code">
>>> fibo.fib(1000)<br />
[1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 55, 89]<br />
1 2 3 5 8 13 21 34 55 89 144 >>> fibo.fib2(100)<br />
[1, 1, 2, 3, 5, 8, 13, 21, 34,<br />
>>> fibo.name	<br />
"fibo"<br />
</p>

<p>
Если Вы собираетесь использовать функцию часто, можете присвоить ее локальной переменной:
</p><br />

<p id="code">
>>> fib = fibo.fib <br />
>>> fib(500)<br />
1 1 2 3 5 8 13 21 34 55 89 144 233 377<br />
</p>

<p>
Модуль может содержать любые инструкции, предназначенные для его инициа­лизации, а не только определения функций. Они выполняются, только когда модуль импортируется первый раз.
Каждый модуль имеет собственное пространство имен, являющееся глобальной об­ластью видимости для всех определенных в нем функций. Таким образом, автор модуля может использовать глобальные переменные, не беспокоясь о возможных конфликтах с глобальными переменными пользователя. С другой стороны, если Вы знаете, что делаете, Вы можете получить доступ к глобальным переменным модуля точно так же, как и к его функциям (на самом деле, функции тоже являются переменными), modname. itemname.
Модули могут импортировать другие модули. Обычно инструкцию import распо­лагают в начале модуля или программы. Имена импортируемых модулей помещаются в текущее пространство имен импортирующего модуля или программы.
Другой вариант инструкции import импортирует имена из модуля непосредствен­но в текущее пространство имен:
</p><br />

<p id="code">
>>> from fibo import fib, fib2 <br />
>>> fib(500)<br />
1 1 2 3 5 8 13 21 34 55 89 144 233 377<br />
</p>

<p>
В этом случае имя модуля не будет представлено в текущей области видимости (в приведенном примере, имя fibo не определено).
Еще один вариант инструкции import позволяет импортировать все имена, опре­деленные в модуле, кроме имен, начинающихся с символа подчеркивания (‘_’):
</p><br />

<p id="code">
>>> from fibo import <br />
>>> fib(500)<br />
1 1 2 3 5 8 13 21 34 55 89 144 233 377<br />
</p>

<p>
Часто возникает необходимость импортировать модуль или объект модуля, исполь­зуя для него локальное имя, отличное от исходного. Например, следующий код позволя­ет заменить имя string на _string (которое не будет импортироваться инструкцией ‘from my_module import *’) при написании модуля:
</p><br />

<p id="code">
import string string = string del string<br />
</p>

<p>
Еще один пример показывает, как можно избежать конфликта имени, определенного в модуле, со встроенным именем:
</p><br />

<p id="code">
import anydbm dbopen = anydbm.open<br />
</p>

<p>
Начиная с версии 2.0, подобные операции можно произвести гораздо проще (и безопас­нее) благодаря расширению синтаксиса инструкции import:
</p><br />

<p id="code">
import string as _string<br />
from anydbm import open as dbopen<br />
</p>

<p>
Следует заметить, что as не является зарезервированным словом, и Вы можете по- прежнему определять переменные с таким именем.
Если имя модуля, который необходимо импортировать, становится известным толь­ко во время выполнения программы, Вы можете воспользоваться инструкцией exec
(‘exec "import " + module_name’) или встроенной функцией	import
</p><br />

					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>