<?php



session_start();

include ('mysql.php');

	include('authentification.php');
	
		$page_num=15;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Комментарии и спецсимволыв Python</p><br />

<i></i><br />


<i>Комментарии в программах</i><br /><br />

<p>
По мере увеличения размеров ваших программ рано или поздно вы столкнетесь с одной
проблемой: их станет сложнее читать. В идеале программа должна читаться так же легко, как
если бы она была написана на естественном языке, но, с одной стороны, естественные языки
все же не имеют такой четкой формальной формы описания объектов и процессов, а с
другой – чрезмерная формализованность зачастую приводит к усложнению описания
простых вещей. Поэтому для повышения понятности кода, его полезно снабжать
комментариями на естественном языке, и большинство языков программирования, не
исключая Питон, предоставляют такую возможность.
</p><br />

<p>
Комментирование кода считается правилом «хорошего тона», поэтому не забывайте
про комментарии – этим вы и себе облегчите жизнь.
Когда над программой работает один программист, то отсутствие комментариев
компенсируется хорошим знанием кода (если, конечно, этот код был написан в сознательном
состоянии), но при работе в команде, за редкими исключениями, комментарии просто
необходимы. Кроме того, через какое-то время вы сами не сможете разобраться в своей
программе, если в ней не будет никаких дополнительных замечаний.
</p><br />

<p>
В Питоне комментарии помечаются символом # – строки, начинающиеся с этого
символа, просто игнорируются интерпретатором и никак не влияют на ее трансляцию и
выполнение:
</p><br />

<p id="code">
# Подсчет процентного соотношения двух величин: 20 и 80<br />
print 100 * 20 / 80, "%"<br />
</p><br />

<p>
Комментарий может следовать и после инструкций, т.е. начинаться не с самого начала строки:<br />
</p><br />

<p id="code">
>>> print 100 * 20 / 80, "%" # целочисленное деление<br />
25 %<br />
</p><br />

<p>
Кроме того, комментариями стоит снабжать и функции. Для этого предусмотрен еще
один способ комментирования:
</p><br />

<p id="code">
def printTwice(value):<br />
&nbsp;&nbsp;&nbsp;&nbsp;
"""Описание функции printTwice()<br />
&nbsp;&nbsp;&nbsp;&nbsp;
Данная функция получает значение и выводит его дважды, разделив пробелом."""<br />
&nbsp;&nbsp;&nbsp;&nbsp;
print value, value<br />
</p><br />

<p>
Как видите, комментарии с описанием функций должны находиться сразу после
заголовка функции. Они заключаются с двойные кавычки три раза и могут занимать
несколько строк. Более того, в Питоне предусмотрена возможность вывода этих
комментариев. Для этого достаточно воспользоваться встроенной переменной __doc__
(начинается и заканчивается парами символов подчеркивания):
</p><br />

<p id="code">
>>> print printTwice.__doc__<br />
&nbsp;&nbsp;&nbsp;&nbsp;
Описание функции printTwice()<br />
&nbsp;&nbsp;&nbsp;&nbsp;
Данная функция получает значение и выводит его дважды, разделив пробелом.<br />
</p><br />

<p>
Этот же комментарий выведет команда справочной системы Питона
help(printTwice).
</p><br />

<p>
Изучайте описания встроенных функций и при написании своих функций старайтесь
комментировать их в том же стиле, чтобы другим программистам было проще
сориентироваться – к такой структуре уже все привыкли.
</p><br />


	<i>Специальные и экранируемые символы</i><br /><br />
		
		
<p>	
В этом разделе мы немного отвлечемся от циклов, чтобы внести ясность в вопрос
специальных текстовых последовательностей, с одной из которых мы уже столкнулись в
предыдущем разделе: "\t". Дело в том, что в кодовых таблицах (наборах цифровых кодов,
обозначающих различные символы, которые компьютер может выводить на экран) есть
целая группа так называемых непечатаемых символов. Непечатаемые символы используются
для управления вводом/выводом. Самые часто используемые из них: знак табуляции,
перенос на новую строку и знак «возврата каретки». Т.к. в кодовой таблице нет символов,
отображаемых на экране, для их обозначения придумали специальные последовательности:
<br />
\t  - Табуляция<br />
\n  - Перевод на новую строку<br />
\r  - Возврат «каретки» (курсора) в начало строки<br />
</p><br />


<p>
Таким образом, если в программе нужно вывести текст из нескольких строк, то на
помощь приходят специальные последовательности:
</p><br />

<p id="code">
>>> print "hello\rH\n\tworld"<br />
Hello<br />
&nbsp;&nbsp;&nbsp;&nbsp;
world<br />
</p><br />

<p>
Разберем, что происходит при выводе строки "hello\rH\n\tworld". Сначала
выводится строка "hello" – только после нее интерпретатор встречает первую специальную
последовательность: "\r" – символ возврата «каретки» на начало строки. Затем Выводится
символ "H", но происходит это на позиции первого символа! При этом уже имеющийся на
этой позиции символ заменяется новым14. После этого последовательности "\n" и "\t"
дают указание произвести перевод на новую строку и оставить отступ в одну табуляцию.
Далее выводится оставшаяся часть строки "world".
</p><br />

<p>
Разумеется, не стоит применять специальные последовательности там, где это не
обязательно: например, проще было исправить первый символ строки вместо добавления
"\rH". Иначе вашу программу будет сложнее читать.
</p><br />

	
					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>