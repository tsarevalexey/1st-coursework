<?php



session_start();

include ('mysql.php');

	include('authentification.php');

	$page_num=3;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '

					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">
				
';


include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Первая программа</p><br />

<i></i><br />
<p>
Настало время запустить интерпретатор Питона и написать первую программу.
Существует два способа использования интерпретатора: командный режим и режим
выполнения программ из файлов. Если в командной строке интерпретатора Питона вы
наберете команду, то интерпретатор тут же выведет результат ее выполнения:
</p>
<p id="code">
$ python <br />
Python 2.3+ (#1, Sep 23 2003, 23:07:16)<br />
[GCC 3.3.1 (SuSE Linux)] on linux2<br />
Type "help", "copyright", "credits" or "license" for more information.<br />
>>> print "Hello world!"<br />
Hello world!<br />
</p>
<p>
Первая строка примера – команда, которая запускает интерпретатор Питона в
операционной системе UNIX. В операционной системе Windows для вызова интерпретатора
достаточно в меню «Пуск ? Программы» вызвать среду разработки IDLE. Следующие две
строки – информация от интерпретатора (номер версии, авторские права – так он
представляется). Четвертая начинается с приглашения интерпретатора >>>, которое
обозначает, что он готов выполнять команды. Мы набрали команду
print "Hello world!", т.е. дали указание вывести на экран строку Hello world!, и в
следующей строке интерпретатор вывел то, что мы просили.
</p><br />
<p>
Мы также можем записать программу в файл и использовать интерпретатор для того,
чтобы ее выполнить. Такой файл называют сценарием или скриптом (от англ. script –
сценарий). Например, используя текстовый редактор, создадим файл prog1.py со
следующим содержанием:
</p>
<p id="code">
print "Hello world!"
</p>
<p>
Названия файлов, содержащих программы на Питоне, принято завершать
последовательностью символов .py (те, кто работают в операционных системах DOS или
Windows, назовут это расширением). Для того чтобы выполнить программу, мы должны
передать интерпретатору в качестве параметра название скрипта:
</p>
<p id="code">
$ python prog1.py
Hello world!
</p>
<br /><i>Что такое отладка?</i>

<p>
Программирование – довольно сложный процесс, и вполне естественно, когда
программист допускает ошибку. Так повелось, что программные ошибки называют «багами»
(от англ. bug – жучок). В русскоязычной литературе это слово вы не встретите, но в сленге
программистов оно используется достаточно часто наряду со словом «глюк». Процесс поиска
и устранения ошибок в англоязычной литературе принято обозначать термином debugging,
мы же будем называть его отладкой.
</p><br />
<p>
Существует три типа ошибок, которые могут возникнуть в программах:
синтаксические ошибки (syntax errors), ошибки выполнения (runtime errors) и семантические
ошибки (semantic errors). Чтобы находить и исправлять их быстрее, имеет смысл научиться
их различать.
</p>

<br /><i>Синтаксические ошибки (syntax errors)</i>
<p>
Для большинства читающих синтаксические ошибки не представляют особой
проблемы. Например, часто встречаются стихотворения без знаков препинания, но мы без
труда можем их прочесть, хотя это часто порождает неоднозначность их интерпретации. Но
трансляторы (и интерпретатор Питона не исключение) очень придирчивы к синтаксическим
ошибкам.
Даже если в вашей программе Питон найдет хотя бы незначительную опечатку, он тут
же выведет сообщение о том, где он на нее наткнулся, и завершит работу. Такую программу
он не сможет выполнить и поэтому отвергнет.
</p>

<br /><i>Ошибки выполнения (runtime errors)</i>
<p>
Второй тип ошибок обычно возникает во время выполнения программы (их принято
называть исключительными ситуациями или, коротко – исключениями, по-английски
exceptions). Такие ошибки имеют другую причину. Если в программе возникает исключение,
то это означает, что по ходу выполнения произошло что-то непредвиденное: например,
программе было передано некорректное значение, или программа попыталась разделить
какое-то значение на ноль, что недопустимо с точки зрения дискретной математики. Если
операционная система присылает запрос на немедленное завершение программы, то также
возникает исключение.
</p>

<br /><i>Семантические ошибки (semantic errors)</i>
<p>
Третий тип ошибок – семантические ошибки. Первым признаком наличия в вашей
программе семантической ошибки является то, что она выполняется успешно, т.е. без
исключительных ситуаций, но делает не то, что вы от нее ожидаете.
В таких случаях проблема заключается в том, что семантика написанной программы
отличается от того, что вы имели в виду. Поиск таких ошибок – задача нетривиальная, т.к.
приходится просматривать результаты работу программы и разбираться, что программа
делает на самом деле.
</p>
<p></p>			
					
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">Царев А.</a> 2013
	</footer>

</body>

</html>

';

?>