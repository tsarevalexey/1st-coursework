<?php



session_start();

include ('mysql.php');

	include('authentification.php');

	$page_num=6;

echo '

<!--  -->
<!DOCTYP html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
		<link rel="stylesheet" href="style.css" type="text/css">		
		</head>

<body>

	<header id="page_header">
		<nav>			
				<div id="oglavlenie">
				
					<ul id="ul1">
					
';

include('oglavlenie.php');

echo '
					</ul>
				
				</div>	
				<div id="zakladki">					
					<ul id="ul1">
					
';

include('zakladky.php');

echo '
					</ul>						
				</div>	
				
				<div id="reg">
					<div>
					
';

include('auth.php');

echo '
					</div>
				</div>
				
				<div id="menu">

';

include('menu.php');

echo '

				</div>
		</nav>
	</header>

	<section id="content">
		<div id="content1">
			<div id="content2">	
<p id="z">
Ћогические операторы</p><br />

<i></i><br />
<p>
ƒл€ объединени€ простых выражений в более сложные используютс€
логические операторы: and, or и not.
«начени€ их полностью совпадают со значением английских слов, которыми они
обозначаютс€. ¬ыражение x and y будет истинным только в том случае, когда x Ц истина и
y Ц истина. ¬о всех остальных случа€х выражение будет ложью. ¬ыражение x or y будет
истиной, если хот€ бы один из операндов Ц истина. ќператор not символизирует отрицание:
not x Ц истина, если x Ц ложь, и наоборот: not x Ц ложь, если x Ц истина. ќбратите
внимание, что оператор not унарный, т.е. он работает только с одним операндом.
</p><br />
<i>ќператор проверки услови€</i><br />
<p>
ѕозвол€ет
организовать разветвление программы при выполнении того или иного услови€. ¬ общем
виде он выгл€дит так:
</p>
<p id="code">
if Ћќ√»„≈— ќ≈_”—Ћќ¬»≈:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
ѕќ—Ћ≈ƒќ¬ј“≈Ћ№Ќќ—“№_¬џ–ј∆≈Ќ»…<br />
</p>
<p>
ѕервым идет ключевое слово if (англ. Ђеслиї); за ним Ц логическое выражение; затем
двоеточие, обозначающее конец заголовка оператора, а после него Ц люба€
последовательность выражений или тело условного оператора, которое будет выполн€тьс€ в
случае, если условие в заголовке оператора истинно. ѕростой пример:
</p><br />
<p id="code">
x = 2<br />
if x > 0:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
print "x is positive"<br />
if x < 0:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
print "x is negative"<br />
</p>

<p>
”словный оператор if имеет расширенный формат, позвол€ющий провер€ть несколько
независимых друг от друга условий и выполн€ть один из блоков, поставленных в
соответствие с этими услови€ми. ¬ общем виде оператор выгл€дит так:
</p><br />

<p id="code">
if Ћќ√»„≈— ќ≈_”—Ћќ¬»≈_1:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
ѕќ—Ћ≈ƒќ¬ј“≈Ћ№Ќќ—“№_¬џ–ј∆≈Ќ»…_1<br />
elif Ћќ√»„≈— ќ≈_”—Ћќ¬»≈_2:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
ѕќ—Ћ≈ƒќ¬ј“≈Ћ№Ќќ—“№_¬џ–ј∆≈Ќ»…_2<br />
elif Ћќ√»„≈— ќ≈_”—Ћќ¬»≈_3:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
ѕќ—Ћ≈ƒќ¬ј“≈Ћ№Ќќ—“№_¬џ–ј∆≈Ќ»…_3<br />
...<br />
else:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
ѕќ—Ћ≈ƒќ¬ј“≈Ћ№Ќќ—“№_¬џ–ј∆≈Ќ»…_N<br />
</p>

<i>»нструкци€ while</i><br />

<p>
¬се высокоуровневые €зыки программировани€ имеют
специальные операторы, позвол€ющие организовывать циклы в программах. “акие
операторы обычно так и называют: операторами цикла.
 аждый циклический оператор имеет тело цикла Ц некий блок кода, который
интерпретатор будет повтор€ть пока условие повторени€ цикла будет оставатьс€ истинным.
¬ €зыке ѕитон оператор цикла выгл€дит так:
</p><br />

<p id="code">
while ”—Ћќ¬»≈_ѕќ¬“ќ–≈Ќ»я_÷» Ћј:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
“≈Ћќ_÷» Ћј<br />
</p>
<p>
язык ѕитон имеет много интересных и полезных особенностей, одной из которых
€вл€етс€ расширенный вариант оператора цикла:
</p><br />

<p id="code">
while ”—Ћќ¬»≈_ѕќ¬“ќ–≈Ќ»я_÷» Ћј:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
“≈Ћќ_÷» Ћј<br />
else:<br />
&nbsp;&nbsp;&nbsp;&nbsp;
јЋ№“≈–Ќј“»¬Ќјя_¬≈“ ј_÷» Ћј<br />
</p>

<i>»нструкци€ for</i><br />
<p>
»нструкци€ for в €зыке Python немного отличаетс€ от того, что используетс€ в таких €зыках как C или Pascal. ¬место того, чтобы всегда перебирать числа арифметической прогрессии (как в Pascal), или предоставл€ть пользователю полную свободу выбора итератора и услови€ выхода из цикла (как в —), перебирает элементы произвольной последовательности (например, списка или строки) в пор€дке их следовани€:
</p><br />

<p id="code">
>>> # »змерение нескольких строк:<br />
...	a = ["кот", "окно", "выбросить"]<br />
>>> for x in a:<br />
...	print x, len(x)<br />
#–езультат:кот 3 окно 4 выбросить 9<br />
</p>

<i>
ѕодробнее об услови€х
</i><br />
<p>
ѕомимо описанных ранее операторов сравнени€, существует еще несколько условных операторов.
ќператоры in и not in провер€ют, есть указанное значение в последовательно≠сти. ќператоры is и is not определ€ют, ссылаютс€ ли две переменные на один и тот же объект. ¬се приведенные здесь операторы имеют одинаковый приоритет, который ниже, чем у арифметических операторов.
Ћогические выражени€ могут быть сцеплены: например, Сa < b == c провер€ет, меньше ли a чем b и равны ли b и c.
Ћогические выражени€ можно группировать с помощью логических операторов and и or, а также результат можно инвертировать оператором not. ¬се логические операторы имеют меньший приоритет, чем операторы сравнени€. —реди логических опе≠раторов, not имеет наибольший приоритет и or Ч наименьший. “аким образом, СA or not B and CТ эквивалентно СA or ((not B) or C) Т. Ѕезусловно, можно использо≠вать скобки дл€ определени€ пор€дка вычислени€.
јргументы логических операторов and и or вычисл€ютс€ справа налево до тех пор, пока результат не будет определен. Ќапример, если выражени€ A и C истинны, но B ложно, в Сa and B and CТ выражение C вычисл€тьс€ не будет. ¬ообще говор€, возвращаемое значение операторов and и or €вл€етс€ не логическим, а равно значению последнего вычисленного аргумента.
ћожно присвоить результат сравнени€ или логического выражени€ переменной:
</p><br />
<p id="code">
>>> string1, string2, string3 = \<br />
"", "Trondheim", "Hammer Dance"<br />
>>> non_null = string1 or string2 or string3<br />
>>> non_null<br />
"Trondheim"<br />
</p>

ќбратите внимание, что, в отличие от C, присваивание не может находитьс€ вну≠три выражени€. “акое ограничение позвол€ет избежать ошибок, типичных дл€ программ на C: использование = вместо ==.
</p><br />

</p>
			</div>
		</div>
	</section>

	<footer id="page_footer">
		<hr color="CFDBF5">
		<a href="http://vk.com/id36162788">÷арев ј.</a> 2013
	</footer>

</body>

</html>

';

?>